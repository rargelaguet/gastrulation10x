labs(x="Dimension 1", y="Dimension 2") +
scale_color_manual(values=opts$colors) +
theme_bw() +
theme(
legend.position = "none"
)
p
## END TEST ##
# Do (fast) PCA
irlba.out <- irlba::irlba(A = t(m), nv = 15)
# Z.irlba <- irlba.out$u %*% diag(irlba.out$d) # weight embeddings by variance explained
Z.irlba <- irlba.out$u
# t-SNE
# tsne <- Rtsne(Z.irlba, check_duplicates=FALSE, pca=FALSE, theta=0.5, dims=2, initial_dims=model@dimensions$K)
# Z.out <- tsne$Y
# UMAP
umap.defaults$n_neighbors <- 15
umap.defaults$min_dist <- 0.7
umap.out <- umap(Z.irlba, config = umap.defaults)
Z.out <- umap.out$layout
to.plot <- Z.out %>% as.data.table %>% .[,cell:=colnames(m)] %>%
merge(meta.data[,c("cell","celltype")], by="cell")
p <- ggplot(to.plot, aes(x=V1, y=V2, color=`celltype`)) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
scale_color_manual(values=opts$colors) +
theme_bw() +
theme(
legend.position = "none"
)
p
## END TEST ##
umap.defaults$n_neighbors <- 25
umap.defaults$min_dist <- 0.7
umap.out <- umap(Z.irlba, config = umap.defaults)
Z.out <- umap.out$layout
to.plot <- Z.out %>% as.data.table %>% .[,cell:=colnames(m)] %>%
merge(meta.data[,c("cell","celltype")], by="cell")
p <- ggplot(to.plot, aes(x=V1, y=V2, color=`celltype`)) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
scale_color_manual(values=opts$colors) +
theme_bw() +
theme(
legend.position = "none"
)
p
# UMAP
umap.defaults$n_neighbors <- 5
umap.defaults$min_dist <- 0.7
umap.out <- umap(Z.irlba, config = umap.defaults)
Z.out <- umap.out$layout
to.plot <- Z.out %>% as.data.table %>% .[,cell:=colnames(m)] %>%
merge(meta.data[,c("cell","celltype")], by="cell")
p <- ggplot(to.plot, aes(x=V1, y=V2, color=`celltype`)) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
scale_color_manual(values=opts$colors) +
theme_bw() +
theme(
legend.position = "none"
)
p
umap.defaults$n_neighbors <- 10
umap.defaults$min_dist <- 0.7
umap.out <- umap(Z.irlba, config = umap.defaults)
Z.out <- umap.out$layout
to.plot <- Z.out %>% as.data.table %>% .[,cell:=colnames(m)] %>%
merge(meta.data[,c("cell","celltype")], by="cell")
p <- ggplot(to.plot, aes(x=V1, y=V2, color=`celltype`)) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
scale_color_manual(values=opts$colors) +
theme_bw() +
theme(
legend.position = "none"
)
p
Z.irlba <- irlba.out$u %*% diag(irlba.out$d) # weight embeddings by variance explained
# Z.irlba <- irlba.out$u
# t-SNE
# tsne <- Rtsne(Z.irlba, check_duplicates=FALSE, pca=FALSE, theta=0.5, dims=2, initial_dims=model@dimensions$K)
# Z.out <- tsne$Y
# UMAP
umap.defaults$n_neighbors <- 10
umap.defaults$min_dist <- 0.7
umap.out <- umap(Z.irlba, config = umap.defaults)
Z.out <- umap.out$layout
to.plot <- Z.out %>% as.data.table %>% .[,cell:=colnames(m)] %>%
merge(meta.data[,c("cell","celltype")], by="cell")
p <- ggplot(to.plot, aes(x=V1, y=V2, color=`celltype`)) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
scale_color_manual(values=opts$colors) +
theme_bw() +
theme(
legend.position = "none"
)
p
## END TEST ##
write.table(t(m), io$outfile, row.names=T, col.names=T, quote=F, sep="\t")
# Compress output file
system(sprintf("gzip -f %s",io$outfile))
library(Seurat)
library(scran)
library(SingleCellExperiment)
library(data.table)
library(purrr)
source("/Users/ricard/gastrulation10x/mofa/load_settings.R")
## Define I/O ##
if (grepl("ricard",Sys.info()['nodename'])) {
io$basedir <- "/Users/ricard/data/gastrulation10x"
io$gene.metadata <- "/Users/ricard/data/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
} else {
io$basedir <- "/hps/nobackup/stegle/users/ricard/gastrulation10x"
}
io$outdir <- paste0(io$basedir,"/mofa")
io$outfile <- paste0(io$outdir,"/data/E7.5.txt")
## Define options ##
# Define which stage and lineages to look at
opts$stage <- c(
"E7.5"
)
###############
## Load data ##
###############
io$seurat <- sprintf("%s/processed/seurat_%s.rds",io$basedir,opts$stage)
srat <- readRDS(io$seurat)
meta.data <- srat@meta.data
################
## Filter data ##
################
## Filter out genes ##
# Remove non-variable genes
genes1 <- apply(srat@data,1,var)>0
# Remove duplicated genes
genes2 <- rownames(srat@data) != rownames(srat@data)[duplicated(rownames(srat@data))]
# Remove sex genes
ychr.genes <- data.table::fread(io$gene.metadata)[chr=="chrY",symbol]
genes3 <- (!rownames(srat@data) %in% c("Xist",ychr.genes))
# Create new Seurat object
srat <- CreateSeuratObject( srat@raw.data[genes1&genes2&genes3,], meta.data=meta.data)
## Filter out samples ##
# Filter out very small lineages
small_lineages <- names(which(table(srat@meta.data$celltype) < 5))
cells.use <- rownames(srat@meta.data[!srat@meta.data$celltype %in% small_lineages,])
srat <- SubsetData(srat, cells.use=cells.use)
# Filter out doublets (this has been done before)
# Create new Seurat object
# srat <- CreateSeuratObject( srat@raw.data[genes1&genes2&genes3,], meta.data=meta.data)
################
## Normalize data ##
################
# Normalize and regress out batch effects
srat <- NormalizeData(srat, scale.factor=1000)
srat <- ScaleData(
srat,
vars.to.regress=c("sample"),
model.use = "linear",
do.scale = FALSE, do.center = TRUE,
do.par = TRUE, num.cores = 4
)
# Select highly variable genes
# srat <- FindVariableGenes(srat, x.low.cutoff = 0.001, y.cutoff = 0.5, do.plot = F, selection.method = "dispersion", top.genes=1000)
srat <- FindVariableGenes(srat, x.low.cutoff = 0.001, y.cutoff = 0.5, do.plot = F, selection.method = "dispersion", top.genes=2500)
m <- as.matrix( srat@scale.data[srat@var.genes,] )
## START TEST ##
# Do (fast) PCA
irlba.out <- irlba::irlba(A = t(m), nv = 15)
Z.irlba <- irlba.out$u %*% diag(irlba.out$d) # weight embeddings by variance explained
# Z.irlba <- irlba.out$u
# t-SNE
# tsne <- Rtsne(Z.irlba, check_duplicates=FALSE, pca=FALSE, theta=0.5, dims=2, initial_dims=model@dimensions$K)
# Z.out <- tsne$Y
# UMAP
umap.defaults$n_neighbors <- 15
umap.defaults$min_dist <- 0.7
umap.out <- umap(Z.irlba, config = umap.defaults)
Z.out <- umap.out$layout
to.plot <- Z.out %>% as.data.table %>% .[,cell:=colnames(m)] %>%
merge(meta.data[,c("cell","celltype")], by="cell")
p <- ggplot(to.plot, aes(x=V1, y=V2, color=`celltype`)) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
scale_color_manual(values=opts$colors) +
theme_bw() +
theme(
legend.position = "none"
)
p
?irlba::prcomp_irlba
?irlba
Z <- irlba.out$u
Z
dim(Z)
apply(Z,2,var)
?irlba
?prcomp_irlba
test <- irlba::prcomp_irlba(A = t(m), n = 15)
test <- irlba::prcomp_irlba(x = t(m), n = 15)
apply(test$x,2,var)
dim(test$rotation)
apply(test$rotation,2,var)
sort(apply(test$rotation,2,var))
sort(apply(test$x,2,var))
sort(apply(test$rotation,2,var))
dim(test$rotation)
test$sdev
foo <- t(m) %*% test$rotation
dim(foo)
foo[1:3,1:3]
test$x[1:3,1:3]
test$rotation[1:3,1:3]
foo[1:3,1:3]
test$x[1:3,1:3]
Z.irlba[1:3,1:3]
irlba.out$d
irlba.out$u
irlba.out$u[1:3,1:3]
##
irlba.out$u[1:3,1:3]
test$x[1:3,1:3]
(t(m) %*% test$rotation)[1:3,1:3]
(irlba.out$u %*% diag(irlba.out$d) )[1:3,1:3]
test$x[1:3,1:3]
# Do fast PCA with prcomp_irba
Z.irlba <- irlba::prcomp_irlba(x = t(m), n = 15)$x
umap.defaults$n_neighbors <- 15
umap.defaults$min_dist <- 0.7
umap.out <- umap(Z.irlba, config = umap.defaults)
Z.out <- umap.out$layout
to.plot <- Z.out %>% as.data.table %>% .[,cell:=colnames(m)] %>%
merge(meta.data[,c("cell","celltype")], by="cell")
p <- ggplot(to.plot, aes(x=V1, y=V2, color=`celltype`)) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
scale_color_manual(values=opts$colors) +
theme_bw() +
theme(
legend.position = "none"
)
p
?umap
Z.irlba <- irlba::prcomp_irlba(x = t(m), n = 50)$x
umap.defaults$n_neighbors <- 15
umap.defaults$min_dist <- 0.7
umap.out <- umap(Z.irlba, config = umap.defaults)
Z.out <- umap.out$layout
to.plot <- Z.out %>% as.data.table %>% .[,cell:=colnames(m)] %>%
merge(meta.data[,c("cell","celltype")], by="cell")
p <- ggplot(to.plot, aes(x=V1, y=V2, color=`celltype`)) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
scale_color_manual(values=opts$colors) +
theme_bw() +
theme(
legend.position = "none"
)
p
umap.defaults$n_neighbors <- 20
umap.defaults$min_dist <- 0.7
umap.out <- umap(Z.irlba, config = umap.defaults)
Z.out <- umap.out$layout
to.plot <- Z.out %>% as.data.table %>% .[,cell:=colnames(m)] %>%
merge(meta.data[,c("cell","celltype")], by="cell")
p <- ggplot(to.plot, aes(x=V1, y=V2, color=`celltype`)) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
scale_color_manual(values=opts$colors) +
theme_bw() +
theme(
legend.position = "none"
)
p
# Select highly variable genes
srat <- FindVariableGenes(srat, x.low.cutoff = 0.001, y.cutoff = 0.5, do.plot = F, selection.method = "dispersion", top.genes=1000)
dim(m)
m <- as.matrix( srat@scale.data[srat@var.genes,] )
dim(m)
# Do fast PCA with prcomp_irba
Z.irlba <- irlba::prcomp_irlba(x = t(m), n = 50)$x
# t-SNE
# tsne <- Rtsne(Z.irlba, check_duplicates=FALSE, pca=FALSE, theta=0.5, dims=2, initial_dims=model@dimensions$K)
# Z.out <- tsne$Y
# UMAP
umap.defaults$n_neighbors <- 20
umap.defaults$min_dist <- 0.7
umap.out <- umap(Z.irlba, config = umap.defaults)
Z.out <- umap.out$layout
to.plot <- Z.out %>% as.data.table %>% .[,cell:=colnames(m)] %>%
merge(meta.data[,c("cell","celltype")], by="cell")
p <- ggplot(to.plot, aes(x=V1, y=V2, color=`celltype`)) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
scale_color_manual(values=opts$colors) +
theme_bw() +
theme(
legend.position = "none"
)
p
## END TEST ##
srat <- FindVariableGenes(srat, x.low.cutoff = 0.001, y.cutoff = 0.5, do.plot = F, selection.method = "dispersion", top.genes=2500)
###############################
## Batch correction with MNN ##
###############################
## Option 1: MNN, output is a gene expression matrix
# # Convert to SingleCellExperiment
# sce <- Convert(from = srat, to = "sce")
#
# # Do batch correction using MNN
# logcounts <- sapply(unique(sce$sample), function(x) exprs(sce[,sce$sample==x] )) %>% do.call("cbind",.)
#
# result = do.call('mnnCorrect', sce_batches); rm(sce, sce_batches)
# srat@scale.data <- do.call("cbind",result$corrected)
# colnames(srat@scale.data) <- colnames(srat@data)
## Option 2: fastMNN, output is a PCA matrix
# sample_order <- srat@meta.data %>% as.data.table %>% .[,.N,by="sample"] %>% setorder(-N) %>% .$sample
# doBatchCorrect(
#   counts = srat@scale.data,
#   timepoints = srat@meta.data$stage,
#   samples = srat@meta.data$sample,
#   sample_order = sample_order
# )
## Option 4: Seurat multi-CCA (doesn't work)
# samples <- srat@meta.data$sample
# cells <- srat@meta.data$cell
# srat_split <- sapply(unique(srat@meta.data$sample), function(x) SubsetData(srat, cells.use=cells[samples==x]) )
# srat <- RunMultiCCA(srat_split, genes.use = srat_split[[1]]@var.genes, num.ccs = 15)
#
# srat <- AlignSubspace(
#   srat,
#   reduction.type = "cca",
#   grouping.var = "sample",
#   dims.align = 1:10
# )
## START TEST ##
# srat <- RunPCA(srat, pcs.compute = 15)
# srat <- RunUMAP(srat, n_neighbors = 15, min_dist = 0.7, dims.use = 1:15)
#
# # DimPlot(srat, reduction.use="pca", group.by = "sample", cols.use = opts$colors, dim.1=13, dim.2=14)
# DimPlot(srat, reduction.use="umap", group.by = "celltype", cols.use = opts$colors)
## END TEST ##
###################
## Create matrix ##
###################
m <- as.matrix( srat@scale.data[srat@var.genes,] )
write.table(t(m), io$outfile, row.names=T, col.names=T, quote=F, sep="\t")
# Compress output file
system(sprintf("gzip -f %s",io$outfile))
write.table(t(m), io$outfile, row.names=T, col.names=T, quote=F, sep="\t")
# Compress output file
system(sprintf("gzip -f %s",io$outfile))
?split
?split
?paste
i
?split
# devtools::load_all("/Users/ricard/biofam/BioFAMtools")
library(data.table)
library(purrr)
library(ggplot2)
library(scater)
library(reticulate)
library(RColorBrewer)
library(corrplot)
library(BioFAMtools)
source("/Users/ricard/gastrulation10x/mofa/load_settings.R")
sample_metadata <- fread(io$sample.metadata)
file <- paste0(io$basedir,"/mofa/hdf5/E7.0.hdf5")
model <- load_model(file)
file <- paste0(io$basedir,"/mofa/hdf5/E7.0.hdf5")
model <- load_model(file)
sample_metadata_filt <- sample_metadata %>%
setkey(cell) %>% .[unname(unlist(samples_names(model)))]
unname(unlist(samples_names(model)))
samples_names(model)
sample_metadata_filt <- sample_metadata %>%
setkey(cell) %>% .[as.character(unname(unlist(samples_names(model))))]
sample_metadata_filt
r2 <- model@cache$variance_explained$r2_per_factor
factors <- sapply(r2, function(x) x[,"RNA"]>0.001)
model <- subset_factors(model, which(apply(factors,1,sum) >= 1))
r2
model@expectations$Z$E7.0_10[1:3,1:3]
model@training_data$RNA$E7.0_10[1:3,1:3]
model@training_data$RNA$E7.0_30[1:3,1:3]
plot_variance_explained(model, x="group", y="factor")
library(umap)
library(Rtsne)
library(irlba)
theme_pub <- function() {
theme_bw() +
theme(
legend.position = "none",
legend.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
}
# algorithms <- c("tsne","umap")
algorithms <- c("umap")
views <- views_names(model)
umap.defaults$n_neighbors <- 20
umap.defaults$min_dist <- 0.7
samples <- unname(unlist(samples_names(model)))
samples
samples <- as.character(unname(unlist(samples_names(model))))
model@dimensions$K
for (view in views) {
print(view)
Y <- model@training_data[[view]] %>% do.call("cbind",.) %>% t
# Do (fast) PCA
# irlba.out <- irlba(A = Y, nv = model@dimensions$K)
# # Z.irlba <- irlba.out$u
# Z.irlba <- irlba.out$u %*% diag(irlba.out$d) # weight embeddings by variance explained
Z.irlba <- irlba::prcomp_irlba(x = Y, n = model@dimensions$K)$x
for (algorithm in algorithms) {
set.seed(1)
if (algorithm=="tsne") {
tsne <- Rtsne(Z.irlba, check_duplicates=FALSE, pca=FALSE, theta=0.5, dims=2, initial_dims=model@dimensions$K)
Z.out <- tsne$Y
} else if (algorithm=="umap") {
umap.out <- umap(Z.irlba, config = umap.defaults)
Z.out <- umap.out$layout
}
to.plot <- Z.out %>% as.data.table %>% .[,cell:=samples] %>%
merge(sample_metadata_filt, by="cell")
p1 <- ggplot(to.plot, aes(x=V1, y=V2, color=`celltype`)) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
scale_color_manual(values=opts$colors) +
theme_pub()
# pdf(sprintf("%s/%s_%s_celltype.pdf",io$pdfdir,algorithm,view), width=6, height=5.5, useDingbats = F)
print(p1)
# dev.off()
# p2 <- ggplot(to.plot, aes(x=V1, y=V2, color=`sample`)) +
#   geom_point(alpha=0.7, size=1.5) +
#   theme_pub()
#
# pdf(sprintf("%s/%s_%s_sample.pdf",io$pdfdir,algorithm,view), width=6, height=4.5, useDingbats = F)
# print(p2)
# dev.off()
}
}
head(to.plot)
dim(to.plot)
p1 <- ggplot(to.plot, aes(x=V1, y=V2, color=`sample`)) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
scale_color_manual(values=opts$colors) +
theme_pub()
# pdf(sprintf("%s/%s_%s_celltype.pdf",io$pdfdir,algorithm,view), width=6, height=5.5, useDingbats = F)
print(p1)
p1 <- ggplot(to.plot, aes(x=V1, y=V2, color=`sample`)) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
# scale_color_manual(values=opts$colors) +
theme_pub()
# pdf(sprintf("%s/%s_%s_celltype.pdf",io$pdfdir,algorithm,view), width=6, height=5.5, useDingbats = F)
print(p1)
p1 <- ggplot(to.plot, aes(x=V1, y=V2, color=as.factor(`sample`))) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
# scale_color_manual(values=opts$colors) +
theme_pub()
# pdf(sprintf("%s/%s_%s_celltype.pdf",io$pdfdir,algorithm,view), width=6, height=5.5, useDingbats = F)
print(p1)
samples
Z.out
dim(Z.out)
dim(sample_metadata_filt)
model@training_data[[view]][[1]][1:3,1:3]
Y[1:3,1:3]
rownames(Y)
rownames(Y) == sampes
rownames(Y) == samples
all(rownames(Y) == samples)
p1 <- ggplot(to.plot, aes(x=V1, y=V2, color=as.factor(`celltype`))) +
geom_point(alpha=0.7, size=1.5) +
guides(colour = guide_legend(override.aes = list(size=3))) +
labs(x="Dimension 1", y="Dimension 2") +
# scale_color_manual(values=opts$colors) +
theme_pub()
# pdf(sprintf("%s/%s_%s_celltype.pdf",io$pdfdir,algorithm,view), width=6, height=5.5, useDingbats = F)
print(p1)
?ScaleData
library(Seurat)
?ScaleData
