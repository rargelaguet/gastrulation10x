rownames(m)<-x[[1]]
m
}
# metadata <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_tissue.csv.gz")
# all(as.character(unlist(samples_names(model))) %in% metadata$COSMIC_ID)
# data <- fread("/Users/ricard/supek/jurica/GDSC_all_tables_long.csv.gz", sep=",")
#
# data <- data %>% .[feature_group=="expression"] %>%
#   .[,sample_group:=NULL] %>% .[,sample_group:="foo"] %>%
#   .[,sample:=as.character(sample)]
foo <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_IC50.csv.gz", sep=",") %>%
.[,COSMIC_ID:=as.character(COSMIC_ID)] %>% matrix.please
# foo <- foo / rowMeans(foo, na.rm=T)
bar <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_expression.csv.gz", sep=",") %>%
.[,COSMIC_ID:=as.character(COSMIC_ID)] %>% matrix.please
baz <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_mutations_oncogenes.csv.gz", sep=",") %>%
.[,COSMIC_ID:=as.character(COSMIC_ID)] %>% matrix.please
# bazz <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_signatures.csv.gz", sep=",") %>%
#   .[,COSMIC_ID:=as.character(COSMIC_ID)] %>% matrix.please
# bazz <- log(bazz+0.00001)
# data <- list(ic50=foo, expr=bar)
data <- list(ic50=foo, expr=bar, onco_mutations=baz)
# data <- list(ic50=foo, expr=bar, onco_mutations=baz, signatures=bazz)
# Create bioFAM object
object <- create_biofam(data)
data_opts <- get_default_data_options(object)
model_opts <- get_default_model_options(object)
model_opts$num_factors <- 10
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 1000
train_opts$convergence_mode <- "fast"
train_opts$seed <- 1
train_opts$stochastic <- F
train_opts$verbose <- F
train_opts$startELBO <- 100
stochastic_opts <- get_default_stochastic_options(object)
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts,
stochastic_options = stochastic_opts
)
model_opts$likelihood
model_opts$likelihood
model_opts$likelihood$expr
model_opts$likelihood
class(model_opts$likelihood)
model_opts$likelihood["onco_mutations"]
model_opts$likelihood["onco_mutations"] <- "bernoulli"
library(BioFAMtools)
library(data.table)
library(purrr)
library(ggplot2)
library(scater)
library(tidyr)
library(dplyr)
matrix.please <- function(x) {
m<-as.matrix(x[,-1])
rownames(m)<-x[[1]]
m
}
# metadata <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_tissue.csv.gz")
# all(as.character(unlist(samples_names(model))) %in% metadata$COSMIC_ID)
# data <- fread("/Users/ricard/supek/jurica/GDSC_all_tables_long.csv.gz", sep=",")
#
# data <- data %>% .[feature_group=="expression"] %>%
#   .[,sample_group:=NULL] %>% .[,sample_group:="foo"] %>%
#   .[,sample:=as.character(sample)]
foo <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_IC50.csv.gz", sep=",") %>%
.[,COSMIC_ID:=as.character(COSMIC_ID)] %>% matrix.please
# foo <- foo / rowMeans(foo, na.rm=T)
bar <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_expression.csv.gz", sep=",") %>%
.[,COSMIC_ID:=as.character(COSMIC_ID)] %>% matrix.please
baz <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_mutations_oncogenes.csv.gz", sep=",") %>%
.[,COSMIC_ID:=as.character(COSMIC_ID)] %>% matrix.please
# bazz <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_signatures.csv.gz", sep=",") %>%
#   .[,COSMIC_ID:=as.character(COSMIC_ID)] %>% matrix.please
# bazz <- log(bazz+0.00001)
# data <- list(ic50=foo, expr=bar)
data <- list(ic50=foo, expr=bar, onco_mutations=baz)
# data <- list(ic50=foo, expr=bar, onco_mutations=baz, signatures=bazz)
# Create bioFAM object
object <- create_biofam(data)
data_opts <- get_default_data_options(object)
model_opts <- get_default_model_options(object)
model_opts$likelihood["onco_mutations"] <- "bernoulli"
model_opts$num_factors <- 10
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 100
train_opts$convergence_mode <- "fast"
train_opts$seed <- 1
train_opts$stochastic <- F
train_opts$verbose <- F
train_opts$startELBO <- 100
stochastic_opts <- get_default_stochastic_options(object)
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts,
stochastic_options = stochastic_opts
)
model <- run_biofam(object, outfile="/Users/ricard/supek/jurica/test2.hdf5")
object@model_options$likelihood
library(BioFAMtools)
library(data.table)
library(purrr)
library(ggplot2)
library(scater)
library(tidyr)
library(dplyr)
matrix.please <- function(x) {
m<-as.matrix(x[,-1])
rownames(m)<-x[[1]]
m
}
# sample.metadata <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_tissue.csv.gz")
# all(as.character(unlist(samples_names(model))) %in% metadata$COSMIC_ID)
feature.metadata <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_tissue.csv.gz")
# data <- fread("/Users/ricard/supek/jurica/GDSC_all_tables_long.csv.gz", sep=",")
#
# data <- data %>% .[feature_group=="expression"] %>%
#   .[,sample_group:=NULL] %>% .[,sample_group:="foo"] %>%
#   .[,sample:=as.character(sample)]
foo <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_IC50.csv.gz", sep=",") %>%
.[,COSMIC_ID:=as.character(COSMIC_ID)] %>% matrix.please
# foo <- foo / rowMeans(foo, na.rm=T)
bar <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_expression.csv.gz", sep=",") %>%
.[,COSMIC_ID:=as.character(COSMIC_ID)] %>% matrix.please
baz <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_mutations_oncogenes.csv.gz", sep=",") %>%
.[,COSMIC_ID:=as.character(COSMIC_ID)] %>% matrix.please
# bazz <- fread("/Users/ricard/supek/jurica/GDSC_cell_lines_signatures.csv.gz", sep=",") %>%
#   .[,COSMIC_ID:=as.character(COSMIC_ID)] %>% matrix.please
# bazz <- log(bazz+0.00001)
# data <- list(ic50=foo, expr=bar)
data <- list(ic50=foo, expr=bar, onco_mutations=baz)
# data <- list(ic50=foo, expr=bar, onco_mutations=baz, signatures=bazz)
# Create bioFAM object
object <- create_biofam(data)
data_opts <- get_default_data_options(object)
model_opts <- get_default_model_options(object)
model_opts$likelihood["onco_mutations"] <- "bernoulli"
model_opts$num_factors <- 10
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 100
train_opts$convergence_mode <- "fast"
train_opts$seed <- 1
train_opts$stochastic <- F
train_opts$verbose <- F
train_opts$startELBO <- 100
stochastic_opts <- get_default_stochastic_options(object)
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts,
stochastic_options = stochastic_opts
)
object@input_data$onco_mutations$group1
table(object@input_data$onco_mutations$group1)
unname(lapply(object@input_data, function(x) r_to_py(t(x))))
# data <- list(ic50=foo, expr=bar)
data <- list(mut=bazz)
# data <- list(ic50=foo, expr=bar)
data <- list(mut=baz)
# Create bioFAM object
object <- create_biofam(data)
data_opts <- get_default_data_options(object)
model_opts <- get_default_model_options(object)
model_opts$likelihood["onco_mutations"] <- "bernoulli"
model_opts$num_factors <- 10
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 100
train_opts$convergence_mode <- "fast"
train_opts$seed <- 1
train_opts$stochastic <- F
train_opts$verbose <- F
train_opts$startELBO <- 100
stochastic_opts <- get_default_stochastic_options(object)
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
# stochastic_options = stochastic_opts
)
model <- run_biofam(object, outfile="/Users/ricard/supek/jurica/test2.hdf5")
# data <- list(ic50=foo, expr=bar)
data <- list(onco_mutations=baz)
# Create bioFAM object
object <- create_biofam(data)
data_opts <- get_default_data_options(object)
model_opts <- get_default_model_options(object)
model_opts$likelihood["onco_mutations"] <- "bernoulli"
model_opts$num_factors <- 10
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 100
train_opts$convergence_mode <- "fast"
train_opts$seed <- 1
train_opts$stochastic <- F
train_opts$verbose <- F
train_opts$startELBO <- 100
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
# stochastic_options = stochastic_opts
)
model <- run_biofam(object, outfile="/Users/ricard/supek/jurica/test2.hdf5")
object@input_data$
c
object@input_data$onco_mutations$group1
unname(lapply(object@input_data, function(x) r_to_py(t(x))))
asd = unname(lapply(object@input_data, function(x) r_to_py(t(x))))
asd
asd[[1]]
asd[[1]][[1]]
asd[[1]].shape
asd[[1]]$dim
asd[[1]]$shape
names(asd[[1]])
(asd[[1]])
?r_to_py
?np_array
unname(lapply(object@input_data, function(x) np_array(t(x), dtype = np$int64)))
# Set the data
np <- import("numpy", convert = FALSE)
biofam_entrypoint$set_data_matrix(
# data = unname(lapply(object@input_data, function(x) r_to_py(t(x)))),
data = unname(lapply(object@input_data, function(x) np_array(t(x), dtype = np$int64))),
samples_names_dict = r_to_py(lapply(object@input_data[[1]], rownames)),
features_names_dict = r_to_py(lapply(object@input_data, function(m) colnames(m[[1]])))
)
unname(lapply(object@input_data, function(x) np_array(t(x), dtype = np$int64)))
unname(lapply(object@input_data, function(x) lapply(x, function(y) np_array(t(y), dtype = np$int64))))
biofam_entrypoint$set_data_matrix(
# data = unname(lapply(object@input_data, function(x) r_to_py(t(x)))),
data = unname(lapply(object@input_data, function(x) lapply(x, function(y) unname(np_array(t(y), dtype = np$int64))))),
samples_names_dict = r_to_py(lapply(object@input_data[[1]], rownames)),
features_names_dict = r_to_py(lapply(object@input_data, function(m) colnames(m[[1]])))
)
unname(lapply(object@input_data, function(x) lapply(x, function(y) unname(np_array(t(y), dtype = np$int64)))))
y
y=object@input_data
y=object@input_data$onco_mutations
x=object@input_data$onco_mutations
y=object@input_data$onco_mutations$group1
np_array(t(y), dtype = np$int64)
lapply(object@input_data, function(x) lapply(x, function(y) np_array(t(y), dtype = np$int64) ))
biofam_entrypoint$set_data_matrix(
# data = unname(lapply(object@input_data, function(x) r_to_py(t(x)))),
data = unname(lapply(unname(object@input_data), function(x) lapply(unname(x), function(y) np_array(t(y), dtype = np$int64) ))),
samples_names_dict = r_to_py(lapply(object@input_data[[1]], rownames)),
features_names_dict = r_to_py(lapply(object@input_data, function(m) colnames(m[[1]])))
)
unname(lapply(unname(object@input_data), function(x) lapply(unname(x), function(y) np_array(t(y), dtype = np$int64) )))
unname(lapply(object@input_data, function(x) r_to_py(t(x))))
lapply(unname(object@input_data), function(x) lapply(unname(x), function(y) np_array(t(y), dtype = np$int64) ))
asd = lapply(unname(object@input_data), function(x) lapply(unname(x), function(y) np_array(t(y), dtype = np$int64) ))
asd[[1]]
asd[[1]][[1]]
source('~/biofam/BioFAMtools/R/run_biofam.R', echo=TRUE)
model <- run_biofam(object, outfile="/Users/ricard/supek/jurica/test2.hdf5")
source('~/biofam/BioFAMtools/R/run_biofam.R', echo=TRUE)
model <- run_biofam(object, outfile="/Users/ricard/supek/jurica/test2.hdf5")
train_opts$startELBO <- 1
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
# stochastic_options = stochastic_opts
)
model <- run_biofam(object, outfile="/Users/ricard/supek/jurica/test2.hdf5")
data <- list(ic50=foo)
# Create bioFAM object
object <- create_biofam(data)
data_opts <- get_default_data_options(object)
model_opts <- get_default_model_options(object)
model_opts$likelihood["onco_mutations"] <- "bernoulli"
model_opts$num_factors <- 10
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 100
train_opts$convergence_mode <- "fast"
train_opts$seed <- 1
train_opts$stochastic <- F
train_opts$verbose <- F
train_opts$startELBO <- 1
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
# stochastic_options = stochastic_opts
)
model <- run_biofam(object, outfile="/Users/ricard/supek/jurica/test2.hdf5")
data_opts <- get_default_data_options(object)
model_opts <- get_default_model_options(object)
# model_opts$likelihood["onco_mutations"] <- "bernoulli"
model_opts$num_factors <- 10
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts <- get_default_model_options(object)
# model_opts$likelihood["onco_mutations"] <- "bernoulli"
model_opts$num_factors <- 10
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 100
train_opts$convergence_mode <- "fast"
train_opts$seed <- 1
train_opts$stochastic <- F
train_opts$verbose <- F
train_opts$startELBO <- 1
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
# stochastic_options = stochastic_opts
)
model <- run_biofam(object, outfile="/Users/ricard/supek/jurica/test2.hdf5")
model_opts$likelihood
data <- list(ic50=foo)
# Create bioFAM object
object <- create_biofam(data)
data_opts <- get_default_data_options(object)
model_opts <- get_default_model_options(object)
# model_opts$likelihood["onco_mutations"] <- "bernoulli"
model_opts$num_factors <- 10
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
model_opts
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 100
train_opts$convergence_mode <- "fast"
train_opts$seed <- 1
train_opts$stochastic <- F
train_opts$verbose <- F
train_opts$startELBO <- 1
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
# stochastic_options = stochastic_opts
)
model <- run_biofam(object, outfile="/Users/ricard/supek/jurica/test2.hdf5")
lapply(unname(object@input_data), function(x) np_array(t(x), dtype = np$float64) )
lapply(unname(object@input_data), function(x) lapply(unname(x), function(y) np_array(t(y), dtype = np$float64) ))
r_to_py(lapply(object@input_data[[1]], rownames))
lapply(unname(object@input_data), function(x) lapply(x, function(y) np_array(t(y), dtype = np$float64) ))
unname(lapply(object@input_data, function(x) r_to_py(t(x))))
foo = unname(lapply(object@input_data, function(x) r_to_py(t(x))))
bar = lapply(unname(object@input_data), function(x) lapply(x, function(y) np_array(t(y), dtype = np$float64) ))
length(foo)
length(bar)
length(foo[[1]])
length(bar[[1]])
length(foo[[2]])
length(bar[[2]])
bar
bar[[1]]
bar[[1]].shape
dim(bar[[1]])
dim(foo[[1]])
dim(foo[[1]][[|]])
dim(foo[[1]][[1]])
foo[[1]][[1]]
foo[[1]]
foo[[1]][1:3,1:3]
class(foo[[1]])
class(bar[[1]])
asd = lapply(unname(object@input_data), function(x) r_to_py(lapply(x, function(y) np_array(t(y), dtype = np$float64) )))
asd
lapply(unname(object@input_data), function(x) r_to_py(unname(lapply(x, function(y) np_array(t(y), dtype = np$float64) ))))
source('~/biofam/BioFAMtools/R/run_biofam.R', echo=TRUE)
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 10
train_opts$convergence_mode <- "fast"
train_opts$seed <- 1
train_opts$stochastic <- F
train_opts$verbose <- F
train_opts$startELBO <- 1
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
# stochastic_options = stochastic_opts
)
model <- run_biofam(object, outfile="/Users/ricard/supek/jurica/test2.hdf5")
source('~/biofam/BioFAMtools/R/run_biofam.R', echo=TRUE)
model <- run_biofam(object, outfile="/Users/ricard/supek/jurica/test2.hdf5")
model
class(object@training_data$)
class(object@input_data$ic50$group1)
object@input_data$ic50$group1[1:3,1:3]
object@input_data$ic50$group1[1:10,1:10]
mode(object@input_data$ic50$group1[1:10,1:10])
# data <- list(ic50=foo)
data <- list(onco_mutations=baz)
# Create bioFAM object
object <- create_biofam(data)
data_opts <- get_default_data_options(object)
model_opts <- get_default_model_options(object)
# model_opts$likelihood["onco_mutations"] <- "bernoulli"
model_opts$num_factors <- 10
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 10
train_opts$convergence_mode <- "fast"
train_opts$seed <- 1
train_opts$stochastic <- F
train_opts$verbose <- F
train_opts$startELBO <- 1
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
# stochastic_options = stochastic_opts
)
mode(object@input_data$ic50$group1[1:10,1:10])
mode(object@input_data$onco_mutations$group1)
object@input_data$onco_mutations$group1
model_opts <- get_default_model_options(object)
model_opts$likelihood["onco_mutations"] <- "bernoulli"
model_opts$num_factors <- 10
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 10
train_opts$convergence_mode <- "fast"
train_opts$seed <- 1
train_opts$stochastic <- F
train_opts$verbose <- F
train_opts$startELBO <- 1
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
# stochastic_options = stochastic_opts
)
model <- run_biofam(object, outfile="/Users/ricard/supek/jurica/test2.hdf5")
mode(object@input_data$ic50$group1[1:10,1:10])
object@input_data$ic50$group1[1:10,1:10]
object@input_data$onco_mutations$group1
# Create bioFAM object
object <- create_biofam(data)
data_opts <- get_default_data_options(object)
model_opts <- get_default_model_options(object)
model_opts$likelihood["onco_mutations"] <- "bernoulli"
model_opts$num_factors <- 10
model_opts$sl_z <- FALSE
model_opts$sl_w <- TRUE
model_opts$ard_w <- FALSE
model_opts$ard_z <- FALSE
train_opts <- get_default_training_options(object)
train_opts$maxiter <- 10
train_opts$convergence_mode <- "fast"
train_opts$seed <- 1
train_opts$stochastic <- F
train_opts$verbose <- F
train_opts$startELBO <- 1
# stochastic_opts <- get_default_stochastic_options(object)
object <- prepare_biofam(
object = object,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
# stochastic_options = stochastic_opts
)
object@input_data$onco_mutations
mode(object@input_data$onco_mutations)
mode(object@input_data$onco_mutations$group1)
